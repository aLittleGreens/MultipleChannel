import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'


def ext = rootProject.ext

android {
    flavorDimensions "region", "company", "env", "custom"

    productFlavors {
        full {
            dimension "region"
            manifestPlaceholders = [
                    region                 : "${name}",
            ]
        }
        china {
            dimension "region"
            manifestPlaceholders = [
                    region                 : "${name}",
            ]
        }
        international {
            dimension "region"
            manifestPlaceholders = [
                    region                 : "${name}",
            ]
        }
        cp1 {
            dimension "company"
            ndk {
                abiFilters "armeabi-v7a"
            }
        }
        cp2 {
            dimension "company"
            ndk {
                abiFilters "arm64-v8a","armeabi-v7a"
            }
        }
        cp3 {
            dimension "company"
            ndk {
                abiFilters "armeabi-v7a"
            }
        }
        online {
            dimension "env"
            applicationId ext.applicationId+".${name}"
            manifestPlaceholders = [
                    API_URL       : "https://www.baidu.com",
            ]
            resValue 'string', 'zh_app_name', '渠道online'
        }
        dev {
            dimension "env"
            applicationId ext.applicationId+".${name}"
            manifestPlaceholders = [
                    API_URL       : "https://www.baidu.com",
            ]
            resValue 'string', 'zh_app_name', '渠道dev'
        }
        exam {
            dimension "env"
            applicationId ext.applicationId+".${name}"
            manifestPlaceholders = [
                    API_URL       : "https://www.baidu.com",
            ]
            resValue 'string', 'zh_app_name', '渠道Test'
        }
        uat {
            dimension "env"
            applicationId ext.applicationId+".${name}"
            manifestPlaceholders = [
                    API_URL       : "https://www.baidu.com",
            ]
            resValue 'string', 'zh_app_name', '渠道uat'
        }
        yes {
            dimension "custom"
            manifestPlaceholders = [
                    CUSTOM_STATUS       : "yes"
            ]
        }
        no {
            dimension "custom"
            manifestPlaceholders = [
                    CUSTOM_STATUS       : "no"
            ]
        }
    }
}


android {
    compileSdkVersion ext.compileSdkVersion
    defaultConfig {
        applicationId ext.applicationId
        minSdkVersion ext.minSdkVersion
        targetSdkVersion ext.targetSdkVersion
        versionCode ext.versionCode
        versionName ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            buildConfigField "boolean", "IS_APP_DEBUG", "${ext.isAppDebug}"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField "boolean", "IS_APP_DEBUG", "${ext.isAppDebug}"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

project.afterEvaluate {
    preBuild.doFirst {
        println "project.afterEvaluate "
        def envName = getCurrentEnv()

    }
}

def getCurrentEnv() {
    Gradle gradle = getGradle()
    String taskReqStr = gradle.getStartParameter().getTaskRequests().toString()
    println "taskReqStr11:" + taskReqStr
    Pattern pattern
    if (taskReqStr.contains("assemble")) {
        pattern = Pattern.compile("assembleChina(Cp1|Cp2|Cp3)(\\w+)(Yes|No)(Release|Debug)")
    } else {
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")
    }
    Matcher matcher = pattern.matcher(taskReqStr)
    if (matcher.find()) {
        String env = matcher.group(2)
        char[] c = env.toCharArray()
        c[0] = Character.toLowerCase(c[0])
        env = new String(c)
        println "getCurrentEnv:" + env
        return env
    } else {
        println "getCurrentFlavor:cannot_find_current_flavor"
        return ""
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
